// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Rust {
  Future<void> initialUser({required String userId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitialUserConstMeta;

  Future<String> registerUser({required String userId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterUserConstMeta;

  Future<bool> isMlsGroup(
      {required String userId, required String groupId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsMlsGroupConstMeta;

  Future<String> createGroup(
      {required String userId, required String groupId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateGroupConstMeta;

  Future<void> syncMlsState(
      {required String userId, required List<String> groupIds, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncMlsStateConstMeta;

  Future<bool> canAddMemberToGroup(
      {required String userId, required String targetUserId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCanAddMemberToGroupConstMeta;

  Future<void> addMemberToGroup(
      {required String userId,
      required String memberUserId,
      required String groupId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddMemberToGroupConstMeta;

  Future<String> mlsEncryptMsg(
      {required String userId,
      required String msg,
      required String groupId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMlsEncryptMsgConstMeta;

  Future<String> mlsDecryptMsg(
      {required String userId,
      required String msg,
      required String senderUserId,
      required String groupId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMlsDecryptMsgConstMeta;

  Future<void> handleMlsGroupEvent(
      {required String userId, required Uint8List msgBytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleMlsGroupEventConstMeta;
}

class RustImpl implements Rust {
  final RustPlatform _platform;
  factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustImpl.wasm(FutureOr<WasmModule> module) =>
      RustImpl(module as ExternalLibrary);
  RustImpl.raw(this._platform);
  Future<void> initialUser({required String userId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_initial_user(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kInitialUserConstMeta,
      argValues: [userId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitialUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initial_user",
        argNames: ["userId"],
      );

  Future<String> registerUser({required String userId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_register_user(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kRegisterUserConstMeta,
      argValues: [userId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_user",
        argNames: ["userId"],
      );

  Future<bool> isMlsGroup(
      {required String userId, required String groupId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_String(groupId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_mls_group(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_String,
      constMeta: kIsMlsGroupConstMeta,
      argValues: [userId, groupId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsMlsGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_mls_group",
        argNames: ["userId", "groupId"],
      );

  Future<String> createGroup(
      {required String userId, required String groupId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_String(groupId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_group(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kCreateGroupConstMeta,
      argValues: [userId, groupId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_group",
        argNames: ["userId", "groupId"],
      );

  Future<void> syncMlsState(
      {required String userId, required List<String> groupIds, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_StringList(groupIds);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sync_mls_state(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kSyncMlsStateConstMeta,
      argValues: [userId, groupIds],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncMlsStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_mls_state",
        argNames: ["userId", "groupIds"],
      );

  Future<bool> canAddMemberToGroup(
      {required String userId, required String targetUserId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_String(targetUserId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_can_add_member_to_group(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_String,
      constMeta: kCanAddMemberToGroupConstMeta,
      argValues: [userId, targetUserId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCanAddMemberToGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "can_add_member_to_group",
        argNames: ["userId", "targetUserId"],
      );

  Future<void> addMemberToGroup(
      {required String userId,
      required String memberUserId,
      required String groupId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_String(memberUserId);
    var arg2 = _platform.api2wire_String(groupId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_member_to_group(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kAddMemberToGroupConstMeta,
      argValues: [userId, memberUserId, groupId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddMemberToGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_member_to_group",
        argNames: ["userId", "memberUserId", "groupId"],
      );

  Future<String> mlsEncryptMsg(
      {required String userId,
      required String msg,
      required String groupId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_String(msg);
    var arg2 = _platform.api2wire_String(groupId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mls_encrypt_msg(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kMlsEncryptMsgConstMeta,
      argValues: [userId, msg, groupId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMlsEncryptMsgConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mls_encrypt_msg",
        argNames: ["userId", "msg", "groupId"],
      );

  Future<String> mlsDecryptMsg(
      {required String userId,
      required String msg,
      required String senderUserId,
      required String groupId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_String(msg);
    var arg2 = _platform.api2wire_String(senderUserId);
    var arg3 = _platform.api2wire_String(groupId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mls_decrypt_msg(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_String,
      constMeta: kMlsDecryptMsgConstMeta,
      argValues: [userId, msg, senderUserId, groupId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMlsDecryptMsgConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mls_decrypt_msg",
        argNames: ["userId", "msg", "senderUserId", "groupId"],
      );

  Future<void> handleMlsGroupEvent(
      {required String userId, required Uint8List msgBytes, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userId);
    var arg1 = _platform.api2wire_uint_8_list(msgBytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_mls_group_event(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_String,
      constMeta: kHandleMlsGroupEventConstMeta,
      argValues: [userId, msgBytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleMlsGroupEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_mls_group_event",
        argNames: ["userId", "msgBytes"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustPlatform extends FlutterRustBridgeBase<RustWire> {
  RustPlatform(ffi.DynamicLibrary dylib) : super(RustWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_initial_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
  ) {
    return _wire_initial_user(
      port_,
      user_id,
    );
  }

  late final _wire_initial_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_initial_user');
  late final _wire_initial_user = _wire_initial_userPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
  ) {
    return _wire_register_user(
      port_,
      user_id,
    );
  }

  late final _wire_register_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_register_user');
  late final _wire_register_user = _wire_register_userPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_mls_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> group_id,
  ) {
    return _wire_is_mls_group(
      port_,
      user_id,
      group_id,
    );
  }

  late final _wire_is_mls_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_is_mls_group');
  late final _wire_is_mls_group = _wire_is_mls_groupPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> group_id,
  ) {
    return _wire_create_group(
      port_,
      user_id,
      group_id,
    );
  }

  late final _wire_create_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_group');
  late final _wire_create_group = _wire_create_groupPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sync_mls_state(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_StringList> group_ids,
  ) {
    return _wire_sync_mls_state(
      port_,
      user_id,
      group_ids,
    );
  }

  late final _wire_sync_mls_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_sync_mls_state');
  late final _wire_sync_mls_state = _wire_sync_mls_statePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_can_add_member_to_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> target_user_id,
  ) {
    return _wire_can_add_member_to_group(
      port_,
      user_id,
      target_user_id,
    );
  }

  late final _wire_can_add_member_to_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_can_add_member_to_group');
  late final _wire_can_add_member_to_group =
      _wire_can_add_member_to_groupPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_member_to_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> member_user_id,
    ffi.Pointer<wire_uint_8_list> group_id,
  ) {
    return _wire_add_member_to_group(
      port_,
      user_id,
      member_user_id,
      group_id,
    );
  }

  late final _wire_add_member_to_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_member_to_group');
  late final _wire_add_member_to_group =
      _wire_add_member_to_groupPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mls_encrypt_msg(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> msg,
    ffi.Pointer<wire_uint_8_list> group_id,
  ) {
    return _wire_mls_encrypt_msg(
      port_,
      user_id,
      msg,
      group_id,
    );
  }

  late final _wire_mls_encrypt_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mls_encrypt_msg');
  late final _wire_mls_encrypt_msg = _wire_mls_encrypt_msgPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mls_decrypt_msg(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> msg,
    ffi.Pointer<wire_uint_8_list> sender_user_id,
    ffi.Pointer<wire_uint_8_list> group_id,
  ) {
    return _wire_mls_decrypt_msg(
      port_,
      user_id,
      msg,
      sender_user_id,
      group_id,
    );
  }

  late final _wire_mls_decrypt_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mls_decrypt_msg');
  late final _wire_mls_decrypt_msg = _wire_mls_decrypt_msgPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_mls_group_event(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_id,
    ffi.Pointer<wire_uint_8_list> msg_bytes,
  ) {
    return _wire_handle_mls_group_event(
      port_,
      user_id,
      msg_bytes,
    );
  }

  late final _wire_handle_mls_group_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_handle_mls_group_event');
  late final _wire_handle_mls_group_event =
      _wire_handle_mls_group_eventPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
